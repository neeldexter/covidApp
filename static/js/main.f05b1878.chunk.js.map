{"version":3,"sources":["components/Cards/Cards.module.css","api/index.js","components/Cards/Cards.jsx","components/Charts/Chart.jsx","components/countryPicker/countryPicker.jsx","App.js","serviceWorker.js","index.js","components/Charts/Chart.module.css","img/COVID.png","components/countryPicker/countryPicker.module.css"],"names":["module","exports","url","fetchData","a","axios","get","data","fetchDailyData","countries","Cards","state","loading","dig","Val","e","setState","target","name","value","props","changedVal","dataFetched","console","log","this","confirmed","recovered","deaths","lastUpdate","className","styles","container","src","COVID","logo","alt","TextField","label","variant","onChange","Grid","justify","component","Card","md","cname","card","infected","CardContent","Typography","color","gutterBottom","start","end","duration","separator","Date","toDateString","Component","Chart","dailyData","barchart","labels","map","i","reportDate","datasets","total","borderColor","fill","china","outsideChina","CountryPicker","country","lineTension","backgroundColor","bar","options","title","display","text","fontSize","legend","position","App","val","handleChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f05b1878.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1Rvmn\",\"card\":\"Cards_card__1VQIC\",\"infected\":\"Cards_infected__3LHFb\",\"recovered\":\"Cards_recovered__iMBrM\",\"deaths\":\"Cards_deaths__3z5LV\",\"logo\":\"Cards_logo__3uW9l\",\"gridElement\":\"Cards_gridElement__30jhI\"};","import axios from 'axios'\r\n\r\nconst url = 'https://covid19.mathdro.id/api'\r\n\r\nexport const fetchData = async () => {\r\n    try {\r\n        // const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(url)\r\n        // return { confirmed, recovered, deaths, lastUpdate }\r\n        const { data } = await axios.get(url)\r\n        return data\r\n    }\r\n    catch (error) {\r\n\r\n    }\r\n}\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(url + \"/daily\")\r\n        return data\r\n    }\r\n    catch (error) {\r\n\r\n    }\r\n}\r\n\r\nexport const countries = async () => {\r\n    try {\r\n        // const { data } = await axios.get(url + \"/countries\")\r\n        const { data } = await axios.get(`${url}/countries`)\r\n        return data\r\n    }\r\n    catch (error) {\r\n\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Card, CardContent, Typography, Grid, TextField } from '@material-ui/core';\r\nimport { fetchData } from '../../api'\r\nimport styles from './Cards.module.css'\r\nimport CountUp from 'react-countup'\r\nimport cname from 'classnames'\r\nimport COVID from '../../img/COVID.png'\r\n\r\nclass Cards extends Component {\r\n    state = {\r\n        data: {},\r\n        loading: false,\r\n        dig: ''\r\n    }\r\n    async componentDidMount() {\r\n        const dataFetched = await fetchData();\r\n        console.log(\"response\", dataFetched)\r\n        this.setState({\r\n            data: dataFetched,\r\n            loading: true,\r\n            dig: ''\r\n        })\r\n    }\r\n    Val = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n        this.props.changedVal(e.target.value)\r\n    }\r\n    render() {\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = this.state\r\n        console.log(\"confirm\", deaths)\r\n        return (\r\n\r\n            <div className={styles.container}>\r\n                <img src={COVID} className={styles.logo} alt=\"logo\" />\r\n                <TextField label=\"Countries\" name=\"dig\" value={this.state.dig} variant=\"filled\" onChange={this.Val}\r\n                />\r\n                {this.state.loading ?\r\n                    <Grid container justify=\"center\">\r\n                        <Grid component={Card} md={3} className={cname(styles.card, styles.infected)}>\r\n                            <CardContent>\r\n                                <Typography color=\"textSecondary\" gutterBottom>Infected :</Typography>\r\n                                <Typography variant=\"h6\">\r\n                                    <CountUp\r\n                                        start={0}\r\n                                        end={confirmed.value}\r\n                                        duration={2.5}\r\n                                        separator=\",\"\r\n                                    />\r\n                                </Typography>\r\n                                <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\r\n                                <Typography variant=\"body2\">No. of active cases of COVID:</Typography>\r\n                            </CardContent>\r\n                        </Grid>\r\n                        <Grid component={Card} component={Card} md={3} className={cname(styles.card, styles.recovered)}>\r\n                            <CardContent>\r\n                                <Typography color=\"textSecondary\" gutterBottom>Recoveries: </Typography>\r\n                                <Typography variant=\"h6\">\r\n                                    <CountUp\r\n                                        start={0}\r\n                                        end={recovered.value}\r\n                                        duration={2.5}\r\n                                        separator=\",\"\r\n                                    />\r\n                                </Typography>\r\n                                <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\r\n                                <Typography variant=\"body2\">No. of recovered cases of COVID:</Typography>\r\n                            </CardContent>\r\n                        </Grid>\r\n                        <Grid component={Card} component={Card} md={3} className={cname(styles.card, styles.deaths)}>\r\n                            <CardContent>\r\n                                <Typography color=\"textSecondary\" gutterBottom>Deaths :</Typography>\r\n                                <Typography variant=\"h6\">\r\n                                    <CountUp\r\n                                        start={0}\r\n                                        end={deaths.value}\r\n                                        duration={2.5}\r\n                                        separator=\",\"\r\n                                    />\r\n                                </Typography>\r\n                                <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\r\n                                <Typography variant=\"body2\">No. of Deaths of COVID: </Typography>\r\n                            </CardContent>\r\n                        </Grid>\r\n                    </Grid> : <p>data loading....</p>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cards;","import React, { Component } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2'\r\nimport styles from './Chart.module.css'\r\nclass Chart extends Component {\r\n    state = {\r\n        dailyData: [],\r\n        loading: false\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const dataFetched = await fetchDailyData();\r\n        console.log(\"heloo\", dataFetched)\r\n        this.setState({\r\n            dailyData: dataFetched,\r\n            loading: true\r\n        })\r\n    }\r\n    render() {\r\n        const { dailyData, loading } = this.state\r\n        console.log(\"state\", this.state.loading)\r\n\r\n        return (\r\n            <div className={styles.container}>\r\n                <div className={styles.barchart}>\r\n                    {loading ? <Line\r\n                        data={{\r\n                            labels: dailyData.map((data, i) => {\r\n                                return data.reportDate\r\n                            }),\r\n                            datasets: [{\r\n                                data: dailyData.map((data, i) => {\r\n                                    return data.confirmed.total\r\n                                }),\r\n                                label: 'Infected Worldwide',\r\n                                borderColor: '#3333ff',\r\n                                fill: true\r\n                            }, {\r\n                                data: dailyData.map((data, i) => {\r\n                                    return data.confirmed.china\r\n                                }),\r\n                                label: 'Infected in China',\r\n                                borderColor: 'red',\r\n                                fill: true\r\n                            },\r\n                            {\r\n                                data: dailyData.map((data, i) => {\r\n                                    return data.confirmed.outsideChina\r\n                                }),\r\n                                label: 'Infected outside China',\r\n                                borderColor: 'green',\r\n                                fill: true\r\n                            }]\r\n                        }} /> : null}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Chart;","import React, { Component } from 'react';\r\nimport { countries } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2'\r\nimport styles from './countryPicker.module.css'\r\nimport { red } from '@material-ui/core/colors';\r\n\r\nclass CountryPicker extends Component {\r\n    state = {\r\n        country: [],\r\n        loading: false\r\n    }\r\n    async componentDidMount() {\r\n        const dataFetched = await countries();\r\n        const country = dataFetched.countries.map(data => {\r\n            return data.name\r\n        })\r\n        console.log(\"okkkkkkkkkk\", dataFetched)\r\n        this.setState({\r\n            country: country,\r\n            loading: true\r\n        })\r\n    }\r\n    render() {\r\n\r\n\r\n        const { country, loading } = this.state;\r\n        const state = {\r\n            labels: country,\r\n            datasets: [\r\n                {\r\n                    label: 'Corona Infected',\r\n                    fill: false,\r\n                    lineTension: 0.5,\r\n                    backgroundColor: 'red',\r\n                    borderColor: 'rgba(0,0,0,1)',\r\n                    // borderWidth: 2,\r\n                    data: [65000, 59000, 80000, 81000, 56000, 65000, 59000, 80000, 81000, 56000, 65000,\r\n                        59000, 80000, 81000, 56000, 65000, 59000, 80000, 81000, 56000, 65000, 59000, 80000, 81000, 56000]\r\n                }\r\n            ]\r\n        }\r\n        return (\r\n            <div className={styles.bar}>\r\n                <Bar\r\n                    data={state}\r\n                    options={{\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Countrywise Data',\r\n                            fontSize: 20\r\n                        },\r\n                        legend: {\r\n                            display: true,\r\n                            position: 'right'\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CountryPicker;","import React, { Component } from 'react';\nimport './App.css';\nimport { Cards, Chart, CountryPicker } from './components';\n// import { fetchData } from './api'\n\nclass App extends Component {\n  state = {\n    val: ''\n  }\n  handleChange = (e) => {\n    this.setState({\n      val: e\n    })\n\n\n  }\n  // state = {\n  //   data: {},\n  // }\n\n  // async componentDidMount() {\n  //   const dataFetched = await fetchData();\n  //   console.log(\"response\", dataFetched)\n  //   this.setState({\n  //     data: dataFetched\n  //   })\n  // }\n  render() {\n    console.log(\"props\", this.state.val)\n    return (\n      <div className=\"App\">\n        <Cards changedVal={this.handleChange} />\n\n        <Chart />\n        <CountryPicker />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__i09eB\",\"barchart\":\"Chart_barchart__3e-qw\"};","module.exports = __webpack_public_path__ + \"static/media/COVID.8a7ba975.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bar\":\"countryPicker_bar__1IXIK\"};"],"sourceRoot":""}